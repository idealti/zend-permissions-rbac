{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"../../README.md","title":"Home"},{"location":"examples/","text":"Examples The following is a list of common use-case examples for zend-permission-rbac. Roles Extending and adding roles via instantiation: use Zend\\Permissions\\Rbac\\Rbac; use Zend\\Permissions\\Rbac\\AbstractRole; class MyRole extends AbstractRole { // .. implementation } // Creating roles manually $foo = new MyRole('foo'); $rbac = new Rbac(); $rbac->addRole($foo); var_dump($rbac->hasRole('foo')); // true Adding roles directly to RBAC with the default Zend\\Permission\\Rbac\\Role : use Zend\\Permissions\\Rbac\\Rbac; $rbac = new Rbac(); $rbac->addRole('foo'); var_dump($rbac->hasRole('foo')); // true Handling roles with children: use Zend\\Permissions\\Rbac\\Rbac; use Zend\\Permissions\\Rbac\\Role; $rbac = new Rbac(); $foo = new Role('foo'); $bar = new Role('bar'); // 1 - Add a role with child role directly with instantiated classes. $foo->addChild($bar); $rbac->addRole($foo); // 2 - Same as one, only via rbac container. $rbac->addRole('boo', 'baz'); // baz is a parent of boo $rbac->addRole('baz', ['out', 'of', 'roles']); // create several parents of baz Permissions use Zend\\Permissions\\Rbac\\Rbac; use Zend\\Permissions\\Rbac\\Role; $rbac = new Rbac(); $foo = new Role('foo'); $foo->addPermission('bar'); var_dump($foo->hasPermission('bar')); // true $rbac->addRole($foo); $rbac->isGranted('foo', 'bar'); // true $rbac->isGranted('foo', 'baz'); // false $rbac->getRole('foo')->addPermission('baz'); $rbac->isGranted('foo', 'baz'); // true Dynamic Assertions Checking permission using isGranted() with a class implementing Zend\\Permissions\\Rbac\\AssertionInterface : use App\\Model\\Article; use Zend\\Permissions\\Rbac\\AssertionInterface; use Zend\\Permissions\\Rbac\\Rbac; class AssertUserRoleMatches implements AssertionInterface { protected $userId; protected $article; public function __construct(string $userId) { $this->userId = $userId; } public function setArticle(Article $article) { $this->article = $article; } public function assert(Rbac $rbac, RoleInterface $role = null, string $permission = null) { if (! $this->article) { return false; } return ($this->userId === $this->article->getUserId()); } } // User is assigned the foo role with id 5 // News article belongs to userId 5 // Jazz article belongs to userId 6 $rbac = new Rbac(); $user = $mySessionObject->getUser(); $news = $articleService->getArticle(5); $jazz = $articleService->getArticle(6); $rbac->addRole($user->getRole()); $rbac->getRole($user->getRole())->addPermission('edit.article'); $assertion = new AssertUserIdMatches($user->getId()); $assertion->setArticle($news); // true always - bad! if ($rbac->isGranted($user->getRole(), 'edit.article')) { // hacks another user's article } // true for user id 5, because he belongs to write group and user id matches if ($rbac->isGranted($user->getRole(), 'edit.article', $assertion)) { // edits his own article } $assertion->setArticle($jazz); // false for user id 5 if ($rbac->isGranted($user->getRole(), 'edit.article', $assertion)) { // can not edit another user's article } Performing the same as above with a closure: // assume same variables from previous example $assertion = function($rbac) use ($user, $news) { return ($user->getId() === $news->getUserId()); }; // true if ($rbac->isGranted($user->getRole(), 'edit.article', $assertion)) { // edits his own article }","title":"Examples"},{"location":"examples/#examples","text":"The following is a list of common use-case examples for zend-permission-rbac.","title":"Examples"},{"location":"examples/#roles","text":"Extending and adding roles via instantiation: use Zend\\Permissions\\Rbac\\Rbac; use Zend\\Permissions\\Rbac\\AbstractRole; class MyRole extends AbstractRole { // .. implementation } // Creating roles manually $foo = new MyRole('foo'); $rbac = new Rbac(); $rbac->addRole($foo); var_dump($rbac->hasRole('foo')); // true Adding roles directly to RBAC with the default Zend\\Permission\\Rbac\\Role : use Zend\\Permissions\\Rbac\\Rbac; $rbac = new Rbac(); $rbac->addRole('foo'); var_dump($rbac->hasRole('foo')); // true Handling roles with children: use Zend\\Permissions\\Rbac\\Rbac; use Zend\\Permissions\\Rbac\\Role; $rbac = new Rbac(); $foo = new Role('foo'); $bar = new Role('bar'); // 1 - Add a role with child role directly with instantiated classes. $foo->addChild($bar); $rbac->addRole($foo); // 2 - Same as one, only via rbac container. $rbac->addRole('boo', 'baz'); // baz is a parent of boo $rbac->addRole('baz', ['out', 'of', 'roles']); // create several parents of baz","title":"Roles"},{"location":"examples/#permissions","text":"use Zend\\Permissions\\Rbac\\Rbac; use Zend\\Permissions\\Rbac\\Role; $rbac = new Rbac(); $foo = new Role('foo'); $foo->addPermission('bar'); var_dump($foo->hasPermission('bar')); // true $rbac->addRole($foo); $rbac->isGranted('foo', 'bar'); // true $rbac->isGranted('foo', 'baz'); // false $rbac->getRole('foo')->addPermission('baz'); $rbac->isGranted('foo', 'baz'); // true","title":"Permissions"},{"location":"examples/#dynamic-assertions","text":"Checking permission using isGranted() with a class implementing Zend\\Permissions\\Rbac\\AssertionInterface : use App\\Model\\Article; use Zend\\Permissions\\Rbac\\AssertionInterface; use Zend\\Permissions\\Rbac\\Rbac; class AssertUserRoleMatches implements AssertionInterface { protected $userId; protected $article; public function __construct(string $userId) { $this->userId = $userId; } public function setArticle(Article $article) { $this->article = $article; } public function assert(Rbac $rbac, RoleInterface $role = null, string $permission = null) { if (! $this->article) { return false; } return ($this->userId === $this->article->getUserId()); } } // User is assigned the foo role with id 5 // News article belongs to userId 5 // Jazz article belongs to userId 6 $rbac = new Rbac(); $user = $mySessionObject->getUser(); $news = $articleService->getArticle(5); $jazz = $articleService->getArticle(6); $rbac->addRole($user->getRole()); $rbac->getRole($user->getRole())->addPermission('edit.article'); $assertion = new AssertUserIdMatches($user->getId()); $assertion->setArticle($news); // true always - bad! if ($rbac->isGranted($user->getRole(), 'edit.article')) { // hacks another user's article } // true for user id 5, because he belongs to write group and user id matches if ($rbac->isGranted($user->getRole(), 'edit.article', $assertion)) { // edits his own article } $assertion->setArticle($jazz); // false for user id 5 if ($rbac->isGranted($user->getRole(), 'edit.article', $assertion)) { // can not edit another user's article } Performing the same as above with a closure: // assume same variables from previous example $assertion = function($rbac) use ($user, $news) { return ($user->getId() === $news->getUserId()); }; // true if ($rbac->isGranted($user->getRole(), 'edit.article', $assertion)) { // edits his own article }","title":"Dynamic Assertions"},{"location":"intro/","text":"Introduction zend-permissions-rbac provides a lightweight Role-Based Access Control (RBAC) implementation in PHP. RBAC differs from access control lists (ACL) by putting the emphasis on roles and their permissions rather than objects (resources). For the purposes of this documentation: an identity has one or more roles. a role requests access to a permission. a permission is given to a role. Thus, RBAC has the following model: many to many relationship between identities and roles . many to many relationship between roles and permissions . roles can have parent and child roles (hierarchy of roles). Roles To create a role, extend the abstract class Zend\\Permission\\Rbac\\AbstractRole or use the default role class, Zend\\Permission\\Rbac\\Role . You can instantiate a role and add it to the RBAC container or add a role directly using the RBAC container addRole() method. Permissions Each role can have zero or more permissions and can be set directly to the role or by first retrieving the role from the RBAC container. Any parent role will inherit the permissions of their children. Dynamic Assertions In certain situations simply checking a permission key for access may not be enough. For example, assume two users, Foo and Bar, both have article.edit permission. What's to stop Bar from editing Foo's articles? The answer is dynamic assertions which allow you to specify extra runtime credentials that must pass for access to be granted.","title":"Intro"},{"location":"intro/#introduction","text":"zend-permissions-rbac provides a lightweight Role-Based Access Control (RBAC) implementation in PHP. RBAC differs from access control lists (ACL) by putting the emphasis on roles and their permissions rather than objects (resources). For the purposes of this documentation: an identity has one or more roles. a role requests access to a permission. a permission is given to a role. Thus, RBAC has the following model: many to many relationship between identities and roles . many to many relationship between roles and permissions . roles can have parent and child roles (hierarchy of roles).","title":"Introduction"},{"location":"intro/#roles","text":"To create a role, extend the abstract class Zend\\Permission\\Rbac\\AbstractRole or use the default role class, Zend\\Permission\\Rbac\\Role . You can instantiate a role and add it to the RBAC container or add a role directly using the RBAC container addRole() method.","title":"Roles"},{"location":"intro/#permissions","text":"Each role can have zero or more permissions and can be set directly to the role or by first retrieving the role from the RBAC container. Any parent role will inherit the permissions of their children.","title":"Permissions"},{"location":"intro/#dynamic-assertions","text":"In certain situations simply checking a permission key for access may not be enough. For example, assume two users, Foo and Bar, both have article.edit permission. What's to stop Bar from editing Foo's articles? The answer is dynamic assertions which allow you to specify extra runtime credentials that must pass for access to be granted.","title":"Dynamic Assertions"},{"location":"methods/","text":"Methods Zend\\Permissions\\Rbac\\Role The Role provides the base functionality required by the RoleInterface . Method signature Description __construct(string $name) : void Create a new instance with the provided name. getName() : string Retrieve the name assigned to this role. addPermission(string $name) : void Add a permission for the current role. hasPermission(string $name) : bool Does the role have the given permission? getPermissions(bool $children = true) : array Retrieve all permissions, including child permissions if $children is true. addChild(RoleInterface $child) : Role Add a child role to the current instance. getChildren() : RoleInterface[] Get all child roles. addParent(RoleInterface $parent) : Role Add a parent role to the current instance. getParents() : RoleInterface[] Get all parent roles. Zend\\Permissions\\Rbac\\AssertionInterface Custom assertions can be provided to Rbac::isGranted() (see below); such assertions are provided the Rbac instance on invocation, along with the role and permission being tested against. Method signature Description assert(Rbac $rbac, RoleInterface $role, string $permission) : bool Given an RBAC, a role, and a permission, determine if permission is granted. Zend\\Permissions\\Rbac\\Rbac Rbac is the object with which you will interact within your application in order to query for permissions. Method signature Description addRole(string\\|RoleInterface $child, array\\|RoleInterface $parents = null) Add a role to the RBAC. If $parents is non-null, the $child is also added to any parents provided. getRole(string $role) : RoleInterface Get the role specified by name, raising an exception if not found. getRoles(): RoleInterface[] Retrieve all the roles. hasRole(string\\|RoleInterface $role) : bool Recursively queries the RBAC for the given role, returning true if found, false otherwise. getCreateMissingRoles() : bool Retrieve the flag that determines whether or not $parent roles are added automatically if not present when calling addRole() . setCreateMissingRoles(bool $flag) : void Set the flag that determines whether or not $parent roles are added automatically if not present when calling addRole() . isGranted(string\\|RoleInterface $role, string $permission, $assert = null) Determine if the role has the given permission. If $assert is provided and either an AssertInterface instance or callable, it will be queried before checking against the given role.","title":"Methods"},{"location":"methods/#methods","text":"","title":"Methods"},{"location":"methods/#zendpermissionsrbacrole","text":"The Role provides the base functionality required by the RoleInterface . Method signature Description __construct(string $name) : void Create a new instance with the provided name. getName() : string Retrieve the name assigned to this role. addPermission(string $name) : void Add a permission for the current role. hasPermission(string $name) : bool Does the role have the given permission? getPermissions(bool $children = true) : array Retrieve all permissions, including child permissions if $children is true. addChild(RoleInterface $child) : Role Add a child role to the current instance. getChildren() : RoleInterface[] Get all child roles. addParent(RoleInterface $parent) : Role Add a parent role to the current instance. getParents() : RoleInterface[] Get all parent roles.","title":"Zend\\Permissions\\Rbac\\Role"},{"location":"methods/#zendpermissionsrbacassertioninterface","text":"Custom assertions can be provided to Rbac::isGranted() (see below); such assertions are provided the Rbac instance on invocation, along with the role and permission being tested against. Method signature Description assert(Rbac $rbac, RoleInterface $role, string $permission) : bool Given an RBAC, a role, and a permission, determine if permission is granted.","title":"Zend\\Permissions\\Rbac\\AssertionInterface"},{"location":"methods/#zendpermissionsrbacrbac","text":"Rbac is the object with which you will interact within your application in order to query for permissions. Method signature Description addRole(string\\|RoleInterface $child, array\\|RoleInterface $parents = null) Add a role to the RBAC. If $parents is non-null, the $child is also added to any parents provided. getRole(string $role) : RoleInterface Get the role specified by name, raising an exception if not found. getRoles(): RoleInterface[] Retrieve all the roles. hasRole(string\\|RoleInterface $role) : bool Recursively queries the RBAC for the given role, returning true if found, false otherwise. getCreateMissingRoles() : bool Retrieve the flag that determines whether or not $parent roles are added automatically if not present when calling addRole() . setCreateMissingRoles(bool $flag) : void Set the flag that determines whether or not $parent roles are added automatically if not present when calling addRole() . isGranted(string\\|RoleInterface $role, string $permission, $assert = null) Determine if the role has the given permission. If $assert is provided and either an AssertInterface instance or callable, it will be queried before checking against the given role.","title":"Zend\\Permissions\\Rbac\\Rbac"},{"location":"migration/to-v3-0/","text":"Upgrading to 3.0 If you upgrade from version 2 releases, you will notice a few changes. This document details the changes Minimum supported PHP version Version 3 drops support for PHP versions prior to PHP 7.1. AssertionInterface The primary change is the Zend\\Permissions\\Rbac\\AssertionInterface::assert() method definition. The new assert method has the following signature: namespace Zend\\Permissions\\Rbac; public function assert( Rbac $rbac, RoleInterface $role, string $permission ) : bool The version 2 releases defined the method such that it only accepted a single parameter, Rbac $rbac . Version 3 adds the $role and $permission parameters. This simplifies implementation of dynamic assertions using the role and the permission information. For instance, imagine you want to disable a specific permission foo for an admin role; you can implement that as follows: public function assert(Rbac $rbac, RoleInterface $role, string $permission) : bool { return ! ($permission === 'foo' && $role->getName() === 'admin'); } If you were previously implementing AssertionInterface , you will need to update the assert() signature to match the changes in version 3. If you were creating assertions as PHP callables, you may continue to use the existing signature; however, you may also expand them to accept the new arguments should they assist you in creating more complex, dynamic assertions. RoleInterface Zend\\Permissions\\Rbac\\RoleInterface also received a number of changes, including type hints and method name changes. Type hints With the update to PHP 7.1 , we also updated the RoleInterface to provide: scalar type hints where applicable ( addPermission() and hasPermission() ). add return type hints (including scalar type hints) to all methods. You will need to examine the RoleInterface definitions to determine what changes to make to your implementations. setParent becomes addParent In version 3, we renamed the method Role::setParent() to Role::addParent() . This naming is more consistent with other method names, such as Role::addChild() , and also makes clear that more than one parent may be provided to any given role. getParent becomes getParents In line with the previous change, getParent() was also renamed to getParents() , which returns an array of RoleInterface instances. Removed support for string arguments in Role::addChild Version 3 no longer allows adding a child using a string role name; you may only provide RoleInterface instances. Adds getChildren Since roles may have multiple children, the method getChildren() was added; it returns an array of RoleInterface instances.","title":"v2.X to v3.0"},{"location":"migration/to-v3-0/#upgrading-to-30","text":"If you upgrade from version 2 releases, you will notice a few changes. This document details the changes","title":"Upgrading to 3.0"},{"location":"migration/to-v3-0/#minimum-supported-php-version","text":"Version 3 drops support for PHP versions prior to PHP 7.1.","title":"Minimum supported PHP version"},{"location":"migration/to-v3-0/#assertioninterface","text":"The primary change is the Zend\\Permissions\\Rbac\\AssertionInterface::assert() method definition. The new assert method has the following signature: namespace Zend\\Permissions\\Rbac; public function assert( Rbac $rbac, RoleInterface $role, string $permission ) : bool The version 2 releases defined the method such that it only accepted a single parameter, Rbac $rbac . Version 3 adds the $role and $permission parameters. This simplifies implementation of dynamic assertions using the role and the permission information. For instance, imagine you want to disable a specific permission foo for an admin role; you can implement that as follows: public function assert(Rbac $rbac, RoleInterface $role, string $permission) : bool { return ! ($permission === 'foo' && $role->getName() === 'admin'); } If you were previously implementing AssertionInterface , you will need to update the assert() signature to match the changes in version 3. If you were creating assertions as PHP callables, you may continue to use the existing signature; however, you may also expand them to accept the new arguments should they assist you in creating more complex, dynamic assertions.","title":"AssertionInterface"},{"location":"migration/to-v3-0/#roleinterface","text":"Zend\\Permissions\\Rbac\\RoleInterface also received a number of changes, including type hints and method name changes.","title":"RoleInterface"}]}